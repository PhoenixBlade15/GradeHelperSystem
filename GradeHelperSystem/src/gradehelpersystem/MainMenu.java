/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gradehelpersystem;

import java.io.File;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Scanner;
import static gradehelpersystem.GradeHelperSystem.dirS;
import javax.swing.JOptionPane;

/**
 *
 * @author Matthew
 */


public class MainMenu extends javax.swing.JFrame {

    /**
     * Creates new form MainMenu
     */
    public MainMenu() {
        initComponents();
        loadCourses();
        fillTable();
        calculateGPA();
        
    }

    public static String SelectedCourse = "";
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        CoursesTable = new javax.swing.JTable();
        addCourseButton = new javax.swing.JButton();
        removeCourseButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        CourseNameText = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        CurrentSelection = new javax.swing.JComboBox();
        GradeSelector = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        hoursText = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        ConcentrationCombo = new javax.swing.JComboBox();
        checkDegreeButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        gpaLabel = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        gradeCourseText = new javax.swing.JTextField();
        gradeCourseButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        CoursesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Course", "Current", "Grade"
            }
        ));
        jScrollPane1.setViewportView(CoursesTable);

        addCourseButton.setText("Add Couse");
        addCourseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCourseButtonActionPerformed(evt);
            }
        });

        removeCourseButton.setText("Remove Course");
        removeCourseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeCourseButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Course:");

        CourseNameText.setToolTipText("The course you want to put in the system. Example: \"CSC100\" max 7 length and min of 6 length course names.");

        jLabel2.setText("Current?");

        jLabel3.setText("Grade:");

        CurrentSelection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Yes", "No" }));
        CurrentSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CurrentSelectionActionPerformed(evt);
            }
        });

        GradeSelector.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "A", "B", "C", "D", "F" }));

        jLabel4.setText("Hours:");

        jLabel5.setText("Concentration:");

        ConcentrationCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "General", "Digital Forensics and Cybersecurity", "Computer Technology", "Interactive Multimedia", "Artificial Intelligence in data Science" }));

        checkDegreeButton.setText("Check Concentration Progress");
        checkDegreeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkDegreeButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("GPA:");

        gpaLabel.setText("4");

        jLabel7.setText("Course to view grades:");

        gradeCourseButton.setText("View Grades");
        gradeCourseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gradeCourseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 578, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(CourseNameText, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)
                            .addComponent(GradeSelector, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CurrentSelection, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(hoursText)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(addCourseButton))
                            .addComponent(removeCourseButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(gpaLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(checkDegreeButton))
                            .addComponent(ConcentrationCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(gradeCourseText, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(gradeCourseButton)))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CourseNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(CurrentSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(GradeSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(hoursText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addComponent(addCourseButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeCourseButton)
                .addGap(36, 36, 36)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ConcentrationCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkDegreeButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(gpaLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(gradeCourseText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(gradeCourseButton))
        );

        addCourseButton.getAccessibleContext().setAccessibleName("addCourse");
        removeCourseButton.getAccessibleContext().setAccessibleName("removeCourse");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    ArrayList<String> courses = new ArrayList<>();
    ArrayList<String> justCourses = new ArrayList<>();
    ArrayList<Integer> justWeight = new ArrayList<>();
    ArrayList<String> justGrades = new ArrayList<>();
    
    // Loads courses into array list
    public void loadCourses(){
        courses.clear();
        justCourses.clear();
        justWeight.clear();
        justGrades.clear();
        int isCourse = 0;
        try{
            File dir = new File(dirS);
            File coursesFile = new File(dir + "\\Courses.txt");
            if ( coursesFile.exists() ){
                Scanner input = new Scanner( coursesFile );
                String text;
                while ( true ){
                    try {
                        text = input.next();
                        if ( isCourse == 0 || isCourse == 4){
                            isCourse = 0;
                            justCourses.add(text);
                        }
                        if ( isCourse == 2 ){
                            justGrades.add(text);
                        }
                        if ( isCourse == 3 ){
                            justWeight.add(Integer.parseInt(text));
                        }
                        isCourse++;
                    } catch (Exception e){
                        break;
                    }
                    courses.add(text);
                }
            }
        } catch ( Exception e ){
            System.out.println(e);
            System.exit(3);
        }
    }
    
    // Saves the new course
    public void saveCourse(String CourseName, String completed, String grade, String hours){
        
        if ( courses.contains(CourseName) ){
            int coursePlace = courses.indexOf(CourseName);
            courses.remove(coursePlace+3);
            courses.remove(coursePlace+2);
            courses.remove(coursePlace+1);
            courses.remove(coursePlace);
        } 
        if (!CourseName.equals("")){
            justCourses.add(CourseName);
            courses.add(CourseName);
            courses.add(completed);
            courses.add(grade);
            courses.add(hours);
        }
        try{
            File dir = new File(dirS);
            File coursesFile = new File(dir + "\\Courses.txt");
            if ( coursesFile.exists() ){
                coursesFile.delete();
            }
            try {
                dir.mkdir();
                FileWriter fWriter = new FileWriter( coursesFile );
                try (PrintWriter output = new PrintWriter( fWriter )) {
                    for (String course : courses) {
                        output.println(course);
                    }
                }
            } catch (Exception ex) {
                System.out.println(ex);
                System.exit(4);
            }
        } catch ( Exception e ){
            System.out.println(e);
            System.exit(5);
        }
        courses.clear();
        loadCourses();
    }
    
    // Deletes a course out of the system
    public void deleteCourse(String CourseName){
        if ( courses.contains(CourseName) ){
            int coursePlace = courses.indexOf(CourseName);
            courses.remove(coursePlace+3); 
            courses.remove(coursePlace+2); 
            courses.remove(coursePlace+1);
            courses.remove(coursePlace);
            saveCourse("","","","");
        } else {
            msgbox("Course does not exist");
        }
    }
    
    // Fills the table in
    public void fillTable(){
        String[] colNames = new String[] {"Course", "Completed", "Grade", "Hours"};
        String[][] rowData = new String[courses.size() / colNames.length][colNames.length];
        for (int i = 0; i < rowData.length; i++) {
            for (int j = 0; j < rowData[i].length; j++) {
                rowData[i][j] = courses.get(i * colNames.length + j);
            }
        }
        
        CoursesTable = new javax.swing.JTable();
        CoursesTable.setModel(new javax.swing.table.DefaultTableModel( rowData, colNames));
        jScrollPane1.setViewportView(CoursesTable);
    }
    
    // Creates the Grades file for the course being made
    public void createGradeFile( String CourseName ){   
        try{
            File dir = new File(dirS);
            File gradesFile = new File(dir + "\\" + CourseName + "Grade.txt");
            if ( !gradesFile.exists() ){
                try {
                    dir.mkdir();
                    FileWriter fWriter = new FileWriter( gradesFile );
                    try (PrintWriter output = new PrintWriter( fWriter )) {
                        output.println("");
                    }
                } catch (Exception ex) {
                    System.out.println(ex);
                    System.exit(6);
                }
            }
        } catch ( Exception e ){
            System.out.println(e);
            System.exit(7);
        }
    }
    
    // Deletes the grades file for the course
    public void deleteGradeFile( String CourseName ){   
        try{
            File dir = new File(dirS);
            File gradesFile = new File(dir + "\\" + CourseName + "Grade.txt");
            if ( gradesFile.exists() ){
                gradesFile.delete();
            }
        } catch ( Exception e ){
            System.out.println(e);
            System.exit(8);
        }
    }
    
        // Creates the Grades file for the course being made
    public void createCategoryFile( String CourseName ){   
        try{
            File dir = new File(dirS);
            File gradesFile = new File(dir + "\\" + CourseName + "Categories.txt");
            if ( !gradesFile.exists() ){
                try {
                    dir.mkdir();
                    FileWriter fWriter = new FileWriter( gradesFile );
                    try (PrintWriter output = new PrintWriter( fWriter )) {
                        output.println("");
                    }
                } catch (Exception ex) {
                    System.out.println(ex);
                    System.exit(6);
                }
            }
        } catch ( Exception e ){
            System.out.println(e);
            System.exit(7);
        }
    }
    
    // Deletes the grades file for the course
    public void deleteCategoryFile( String CourseName ){   
        try{
            File dir = new File(dirS);
            File gradesFile = new File(dir + "\\" + CourseName + "Categories.txt");
            if ( gradesFile.exists() ){
                gradesFile.delete();
            }
        } catch ( Exception e ){
            System.out.println(e);
            System.exit(8);
        }
    }
    
    // Send message to user
    private void msgbox(String s){
        JOptionPane.showMessageDialog(null, s);
    }
    
        // Checks if core courses have been completed
    public String getCoreRemaining(String concentration) {

        String[] coreNeeded = new String[12];

        // coreCourses is the courses for that core requirement to be fulfilled
        switch (concentration) {
            case "General":
            case "Computer Technology":
            case "Interactive Multimedia":
            case "Artificial Intelligence in data Science":
            case "Statistical Computing":
                {
                    String[] coreCourses = {"CSC185", "CSC190", "CSC191", "CSC195", "CSC310", "CSC313", "CSC340", "CSC449"};
                    for (int i = 0; i < coreCourses.length; i++){
                        
                        if( !justCourses.contains(coreCourses[i]) ){
                            coreNeeded[i] = coreCourses[i] + ", ";
                        }
                    }       
                    if( !justCourses.contains("CSC308") && !justCourses.contains("CSC309") ){
                        coreNeeded[8] = "CSC308, CSC309, ";
                    }
                    break;
                }
            case "Digital Forensics and Cybersecurity":
            {
                String[] coreCourses = {"CSC189", "CSC210", "CSC313", "CSC410", "CSC536", "CSC537", "INF318", "INF321", "INF322"};
                for (int i = 0; i < coreCourses.length; i++){
                    if( !justCourses.contains(coreCourses[i]) ){
                        coreNeeded[i] = coreCourses[i] + ", ";
                    }
                }
                if( !justCourses.contains("CSC308") && !justCourses.contains("CSC309") ){
                    coreNeeded[9] = "CSC308, CSC309, ";
                }   
                if( !justCourses.contains("CSC349") && !justCourses.contains("INF495") ){
                    coreNeeded[10] = "CSC349, INF495, ";
                }
                if( !justCourses.contains("CSC520") && !justCourses.contains("CSC539") && !justCourses.contains("CSC542") && !justCourses.contains("CSC543") && !justCourses.contains("CSC544")  ){
                    coreNeeded[11] = "CSC520, CSC539, CSC542, CSC543, CSC544, ";
                }       
                break;
                }
        }

        String coreNeededString = "";
        for (String coreNeeded1 : coreNeeded) {
            if (coreNeeded1 != null) {
                coreNeededString += coreNeeded1;
            }
        }
        
        return coreNeededString.substring(0, coreNeededString.length()-2);
    }
    
     // Checks if supporting courses have been met
    public String getSupportingRemaining(String concentration) {
        String[] supportingNeeded = new String[11];

        if ( concentration.equals("General") ){
            String[] supportingCourses = { "EET252", "MAT234", "MAT239", "MAT244", "STA270" };

            // Checks each course to make sure that they have completed General concentration
            for (int i = 0; i < supportingCourses.length; i++){
                if( !justCourses.contains(supportingCourses[i]) ){
                    supportingNeeded[i] = supportingCourses[i] + ", ";
                }
            }

            // Checks the primary physical science requirement
            if(     (justCourses.contains("BIO111") && justCourses.contains("BIO112")) ||
                    (justCourses.contains("CHE111") && justCourses.contains("CHE111L") &&
                            (justCourses.contains("CHE112") && justCourses.contains("CHE112L"))) ||
                    (justCourses.contains("GLY108") && justCourses.contains("GLY109")) ||
                    (justCourses.contains("PHY201") && justCourses.contains("PHY202"))
            ){
                if( justCourses.contains("BIO111") && justCourses.contains("BIO112") ){
                    justCourses.remove("BIO111");
                    justCourses.remove("BIO112");

                } else if ( justCourses.contains("CHE111 ") && justCourses.contains("CHE111L") &&
                            justCourses.contains("CHE112 ") && justCourses.contains("CHE112L") ){
                    justCourses.remove("CHE111");
                    justCourses.remove("CHE111L");
                    justCourses.remove("CHE112");
                    justCourses.remove("CHE112L");

                } else if ( justCourses.contains("GLY108") && justCourses.contains("GLY109") ){
                    justCourses.remove("GLY108");
                    justCourses.remove("GLY109");

                } else if ( justCourses.contains("PHY201") && justCourses.contains("PHY202") ){
                    justCourses.remove("PHY201");
                    justCourses.remove("PHY202");
                }
            } else {
                supportingNeeded[5] = "Credit for a Physical Science sequence needed, ";
            }

            // Checks the extra physical science requirement
            boolean extraPhysicalScience = false;
            if( (justCourses.contains("BIO111") || justCourses.contains("BIO112 ")) &&
                    ((justCourses.contains("CHE111") && justCourses.contains("CHE111L")) ||
                            (justCourses.contains("CHE112") && justCourses.contains("CHE112L")))){
                extraPhysicalScience = true;
            } else if( (justCourses.contains("BIO111") || justCourses.contains("BIO112")) &&
                    (justCourses.contains("GLY108") || justCourses.contains("GLY109"))
            ){
                extraPhysicalScience = true;
            } else if( (justCourses.contains("BIO111") || justCourses.contains("BIO112")) &&
                    (justCourses.contains("PHY201") || justCourses.contains("PHY202"))
            ){
                extraPhysicalScience = true;
            } else if ( ((justCourses.contains("CHE111") && justCourses.contains("CHE111L")) ||
                    (justCourses.contains("CHE112") && justCourses.contains("CHE112L"))) &&
                    (justCourses.contains("GLY108") || justCourses.contains("GLY109"))
            ){
                extraPhysicalScience = true;
            } else if ( ((justCourses.contains("CHE111") && justCourses.contains("CHE111L")) ||
                    (justCourses.contains("CHE112") && justCourses.contains("CHE112L"))) &&
                    (justCourses.contains("PHY201") || justCourses.contains("PHY202"))
            ){
                extraPhysicalScience = true;
            } else if( (justCourses.contains("GLY108") || justCourses.contains("GLY109")) &&
                    (justCourses.contains("PHY201") || justCourses.contains("PHY202"))
            ){
                extraPhysicalScience = true;
            }

            if (!extraPhysicalScience) {
                supportingNeeded[6] = "(BIO111 and BIO112, or CHE111/CHE111L and CHE112/CHE112L, or GLY108 and GLY109, or PHY201 and PHY202), ";
            }


        } else if ( concentration.equals("Digital Forensics and Cybersecurity") ){
            String[] supportingCourses = { "CMS210", "FOR301", "FOR401", "FOR465","MAT234", "STA270" };

            // Checks each course to make sure that they have completed Digital Forensics and Cybersecurity concentration
            for (int i = 0; i < supportingCourses.length; i++){
                if( !justCourses.contains(supportingCourses[i]) ){
                    supportingNeeded[i] = supportingCourses[i] + ", ";
                }
            }

            // Checks if they have completed their physical science requirement
            int physcialScienceCount = 0;
            String physcialScienceNotCompleted = "";
            if( justCourses.contains("BIO111") ){
                physcialScienceCount++;
            } else {
                physcialScienceNotCompleted += "BIO111, ";
            }
            if( justCourses.contains("CHE111") || justCourses.contains("CHE111L") ){
                physcialScienceCount++;
            } else {
                physcialScienceNotCompleted += "CHE111, CHE111L, ";
            }
            if( justCourses.contains("PHY201") ){
                physcialScienceCount++;
            } else {
                physcialScienceNotCompleted += "PHY201, ";
            }
            if( physcialScienceCount < 2 ){
                supportingNeeded[6] = physcialScienceNotCompleted;
            }

            String[] reACourses = { "CRJ101", "PLS216", "PLS316", "PLS416" };
            // Checks if they have completed their restricted elective A requirement
            int reA = 0;
            String reANotCompleted = "";

            for (int i = 0; i < reACourses.length; i++){
                if( justCourses.contains(reACourses[i]) ) {
                    reA++;
                } else {
                    reANotCompleted += reACourses[i] + ", ";
                }
            }

            if( reA < 2 ){
                supportingNeeded[7] = reANotCompleted;
            }

            // Checks if they have completed their restricted elective B requirement
            String[] reBCourses = { "CIS320", "CIS325", "HLS400", "HLS401", "HLS402", "HLS403", "NET303", "NET354", "NET454" };
            int reB = 0;
            String reBNotCompleted = "";

            for (int i = 0; i < reBCourses.length; i++){
                if( justCourses.contains(reBCourses[i]) ) {
                    reB++;
                } else {
                    reBNotCompleted += reBCourses[i] + ", ";
                }
            }

            if( reB < 2 ){
                supportingNeeded[8] = reBNotCompleted;
            }

        } else if ( concentration.equals("Computer Technology")){
            String[] supportingCourses = { "EET252 ", "NET302 ", "NET303 ", "NET343 ","NET354 ", "NET403", "NET454" };

            // Checks each course to make sure that they have completed Computer Technology concentration
            for (int i = 0; i < supportingCourses.length; i++){
                if( !justCourses.contains(supportingCourses[i]) ){
                    supportingNeeded[i] = supportingCourses[i] + ", ";
                }
            }

            if( !justCourses.contains("NET344") && !justCourses.contains("NET395") ){
                supportingNeeded[7] = "NET344, NET395, ";
            }
            if( !justCourses.contains("MAT234") && !justCourses.contains("MAT211") ){
                supportingNeeded[8] = "MAT234, MAT211, ";
            }

        } else if ( concentration.equals("Interactive Multimedia")){
            String[] supportingCourses = { "BEM200 ", "EET252 ", "MAT234 ", "MAT239 ","MAT244 ", "MUS290", "PHY201", "STA270" };

            // Checks each course to make sure that they have completed Computer Technology concentration
            for (int i = 0; i < supportingCourses.length; i++){
                if( !justCourses.contains(supportingCourses[i]) ){
                    supportingNeeded[i] = supportingCourses[i] + ", ";
                }
            }

            if( !justCourses.contains("ART200") && !( justCourses.contains("ARH390") || justCourses.contains("ARH391") ) ){
                supportingNeeded[8] = "ART200 and ARH390 or ARH391, ";
            }

            if( !( justCourses.contains("ART100") ||  justCourses.contains("TEC190") || justCourses.contains("GCM313") ) ){
                supportingNeeded[9] = "ART100, TEC190, GCM313, ";
            }

            if( !( justCourses.contains("GEO353") && justCourses.contains("GEO453") ) ||
                    !( justCourses.contains("MKT301") && justCourses.contains("MKT310") ) ||
                    !( justCourses.contains("MGT301") && justCourses.contains("MGT465") )
            ){
                supportingNeeded[10] = "GEO353 and GEO453, MKT301 and MKT310, MGT301 and MGT465, ";
            }

        } else if ( concentration.equals("Artificial Intelligence in data Science")){
            String[] supportingCourses = { "MAT234", "MAT244", "STA270", "STA340","STA375", "STA380", "STA575", "STA580", "STA585" };

            // Checks each course to make sure that they have completed Artificial Intelligence in data Science concentration
            for (int i = 0; i < supportingCourses.length; i++){
                if( !justCourses.contains(supportingCourses[i]) ){
                    supportingNeeded[i] = supportingCourses[i] + ", ";
                }
            }

            if( !(  (justCourses.contains("AEM202") &&
                            (justCourses.contains("AEM332") || justCourses.contains("AEM336") || justCourses.contains("AEM506"))) ||
                    (justCourses.contains("BIO315") && justCourses.contains("BIO553")) ||
                    (justCourses.contains("ECO230") && justCourses.contains("ECO231")) ||
                    (justCourses.contains("ECO320") && justCourses.contains("ECO420")) ||
                    (justCourses.contains("RMI370") &&
                            (justCourses.contains("RMI372") || justCourses.contains("RMI374") || justCourses.contains("INS378"))) ||
                    (justCourses.contains("STA520") && justCourses.contains("STA521")) ||
                    (justCourses.contains("CSC332") &&
                            (justCourses.contains("CSC542") || justCourses.contains("CSC547") || justCourses.contains("CSC548"))) ||
                    (justCourses.contains("GEO353") && justCourses.contains("GEO453")) ||
                    (justCourses.contains("HLS401") || justCourses.contains("HLS402")) ||
                    (justCourses.contains("HLS401") || justCourses.contains("HLS403")) ||
                    (justCourses.contains("HLS402") || justCourses.contains("HLS403"))
            ) ) {
                supportingNeeded[9] = "AEM202 and (AEM332 or AEM336 or AEM506), or BIO315 and BIO533, or ECO230 and ECO231, or RMI370 and (RMI372 or RMI374 or INS378), or STA520 and STA521, or CSC332 and (CSC542 or CSC547 or CSC548), or GEO353 and GEO453, or 2 from (HLS401, HLS402, or HLS403), ";
            }

        } else if ( concentration.equals("Statistical Computing") ) {
            String[] supportingCourses = { "MAT124", "MAT224", "STA270", "STA320","STA375", "STA501", "STA575", "STA580", "STA585" };

            // Checks each course to make sure that they have completed Statistical Computing concentration
            for (int i = 0; i < supportingCourses.length; i++){
                if( !justCourses.contains(supportingCourses[i]) ){
                    supportingNeeded[i] = supportingCourses[i] + ", ";
                }
            }

        }        
        
        String supportingNeededString = "";
        for (String supportingNeeded1 : supportingNeeded) {
            if (supportingNeeded1 != null) {
                supportingNeededString += supportingNeeded1;
            }
        }
        
        return supportingNeededString.substring(0, supportingNeededString.length()-2);
    }
    
    // Checks if concentration requirements are done
    public String getConcentrationRemaining(String concentration) {
        String[] concentrationNeeded = new String[10];
        
        if ( concentration.equals("General") ){
            String[] concentrationCourses = { "CSC311", "CSC320", "CSC360", "CSC400","CSC440", "CSC460", "CSC541", "CSC545" };

            for (int i = 0; i < concentrationCourses.length; i++){
                if( !justCourses.contains(concentrationCourses[i]) ){
                    concentrationNeeded[i] = concentrationCourses[i] + ", ";
                }
            }

            if ( !justCourses.contains("CSC494") && !justCourses.contains("CSC495") && !justCourses.contains("CSC496") ){
                concentrationNeeded[8] = "CSC494, CSC495, CSC496, ";
            }

        } else if ( concentration.equals("Computer Technology") ){
            String[] concentrationCourses = { "CSC360", "CSC440", "CSC460", "CSC545","CSC349" };

            for (int i = 0; i < concentrationCourses.length; i++){
                if( !justCourses.contains(concentrationCourses[i]) ){
                    concentrationNeeded[i] = concentrationCourses[i] + ", ";
                }
            }

            if ( !justCourses.contains("CSC33 ") && !justCourses.contains("CSC544") ){
                concentrationNeeded[5] = "CSC330, CSC544, ";
            }

            // Need one CSC course about 300 level excluding CSC 349, 490, 494, 495, and 496
            // Checking from 300 level to 999 level
            boolean above300Course = false;
            for (int i = 300; i < 999; i++){
                if ( !(i == 349 || i == 490 || i == 494 || i == 495 || i == 496)  ){
                    if ( justCourses.contains("CSC" + i + " ") ){
                        above300Course = true;
                        break;
                    }
                }
            }

            if ( !above300Course ) {
                concentrationNeeded[6] = "CSC300+, ";
            }

        } else if ( concentration.equals("Interactive Multimedia") ){
            String[] concentrationCourses = { "CSC140", "CSC315", "CSC316", "CSC491","CSC550" };

            for (int i = 0; i < concentrationCourses.length; i++){
                if( !justCourses.contains(concentrationCourses[i]) ){
                    concentrationNeeded[i] = concentrationCourses[i] + ", ";
                }
            }

            if ( !justCourses.contains("CSC520") && !justCourses.contains("CSC555") ){
                concentrationNeeded[5] = "CSC520, CSC555, ";
            }

            if ( !justCourses.contains("CSC300") && !justCourses.contains("CSC308") && !justCourses.contains("CSC309") &&
                    !justCourses.contains("CSC311") && !justCourses.contains("CSC320") &&
                    !justCourses.contains("CSC330") && !justCourses.contains("CSC332") &&
                    !justCourses.contains("CSC350") && !justCourses.contains("CSC360") &&
                    !justCourses.contains("CSC390") && !justCourses.contains("CSC400") &&
                    !justCourses.contains("CSC425") && !justCourses.contains("CSC440") &&
                    !justCourses.contains("CSC460") && !justCourses.contains("CSC490") &&
                    !justCourses.contains("CSC507") && !justCourses.contains("CSC538") &&
                    !justCourses.contains("CSC540") && !justCourses.contains("CSC541") &&
                    !justCourses.contains("CSC542") && !justCourses.contains("CSC544") &&
                    !justCourses.contains("CSC545") && !justCourses.contains("CSC546") &&
                    !justCourses.contains("CSC547") && !justCourses.contains("CSC548")
            ){
                concentrationNeeded[6] = "CSC300, CSC308, CSC309, CSC311, CSC320, CSC330, CSC332, CSC 350, CSC360, CSC 390, CSC400, CSC425, CSC 440, CSC460, CSC490, CSC507, CSC538, CSC540, CSC541, CSC542, CSC544, CSC545, CSC546, CSC547, CSC 548, ";
            }

            if ( !justCourses.contains("CSC494") && !justCourses.contains("CSC495") && !justCourses.contains("CSC496") ){
                concentrationNeeded[7] = "CSC494, CSC495, CSC496, ";
            }

        } else if ( concentration.equals("Artificial Intelligence in data Science") ){
            String[] concentrationCourses = { "CSC311", "CSC320", "CSC545", "CSC546","CSC581", "CSC582", "CSC583" };

            for (int i = 0; i < concentrationCourses.length; i++){
                if( !justCourses.contains(concentrationCourses[i]) ){
                    concentrationNeeded[i] = concentrationCourses[i] + ", ";
                }
            }

            if ( !justCourses.contains("CSC494 ") && !justCourses.contains("CSC495 ") && !justCourses.contains("CSC496 ") ){
                concentrationNeeded[7] = "CSC494, CSC495, CSC496, ";
            }

        } else if ( concentration.equals("Statistical Computing") ){
            String[] concentrationCourses = { "CSC320", "CSC544", "CSC545" };

            for (int i = 0; i < concentrationCourses.length; i++){
                if( !justCourses.contains(concentrationCourses[i]) ){
                    concentrationNeeded[i] = concentrationCourses[i] + ", ";
                }
            }

            // Checks for two courses from list
            int statComputTwoNeeded = 0;
            String statTwoNeededAvaliable = "";
            String[] statComputTwoNeededCourses = {"CSC300", "CSC315", "CSC316", "CSC332" ,"CSC350", "CSC360",
                     "CSC390", "CSC400", "CSC425", "CSC440", "CSC460", "CSC490", "CSC491", "CSC520", "CSC546",
                     "CSC547", "CSC548", "CSC550", "CSC555" };

            for (int i = 0; i < statComputTwoNeededCourses.length; i++){
                if( justCourses.contains(statComputTwoNeededCourses[i]) ) {
                    statComputTwoNeeded++;
                } else {
                    statTwoNeededAvaliable += statComputTwoNeededCourses[i] + ", ";
                }
            }

            if ( !justCourses.contains("CSC308") && !justCourses.contains("CSC309") ){
                statComputTwoNeeded++;
            } else {
                statTwoNeededAvaliable += "CSC308, CSC309, ";
            }

            if ( statComputTwoNeeded < 2 ){
                concentrationNeeded[3] = statTwoNeededAvaliable;
            }
        } else if ( concentration.equals("Digital Forensics and Cybersecurity") ){
            String[] concentrationCourses = { "CSC332", "CSC360", "CSC400", "CSC460", "CSC520", "CSC544","CSC547", "CSC548", "CSC549" };

            for (int i = 0; i < concentrationCourses.length; i++){
                if( !justCourses.contains(concentrationCourses[i]) ){
                    concentrationNeeded[i] = concentrationCourses[i] + ", ";
                }
            }

            // Checks for two courses from list
            int digitalForensicsTwoNeeded = 0;
            String digitalForensicsTwoNeededAvaliable = "";
            String[] digitalForensicsTwoNeededCourses = {"CSC300", "CSC315", "CSC316", "CSC320", "CSC350", "CSC390",
                           "CSC425", "CSC440", "CSC490", "CSC491", "CSC538", "CSC540", "CSC545", "CSC546", "CSC550",
                           "CSC547", "CSC548", "CSC550" };

            for (int i = 0; i < digitalForensicsTwoNeededCourses.length; i++){
                if( justCourses.contains(digitalForensicsTwoNeededCourses[i]) ) {
                    digitalForensicsTwoNeeded++;
                } else {
                    digitalForensicsTwoNeededAvaliable += digitalForensicsTwoNeededCourses[i] + ", ";
                }
            }

            if ( !justCourses.contains("CSC308") && !justCourses.contains("CSC309") ){
                digitalForensicsTwoNeeded++;
            } else {
                digitalForensicsTwoNeededAvaliable += "CSC308, CSC309, ";
            }

            if ( digitalForensicsTwoNeeded < 2 ){
                concentrationNeeded[3] = digitalForensicsTwoNeededAvaliable;
            }

        }

                String concentrationNeededString = "";
        for (String concentrationNeeded1 : concentrationNeeded) {
            if (concentrationNeeded1 != null) {
                concentrationNeededString += concentrationNeeded1;
            }
        }
        
        return concentrationNeededString.substring(0, concentrationNeededString.length()-2);
    }
        
    // Calculates GPA based on hours and Grades
    public void calculateGPA(){
        double GPA = 0;
        int totalHours = 0;
        int gradeNum;
        for (int i = 0; i < justGrades.size(); i++) {     
            switch (justGrades.get(i)){
                case "A":
                    gradeNum = 4;
                    break;
                case "B":
                    gradeNum = 3;
                    break;
                case "C":
                    gradeNum = 2;
                    break;
                case "D":
                    gradeNum = 1;
                    break;
                case "F":
                    gradeNum = 0;
                    break;
                default:
                    gradeNum = 0;
                    break;
            }
            totalHours += justWeight.get(i);
            GPA += gradeNum*justWeight.get(i);
        }
        GPA = GPA/totalHours;
        gpaLabel.setText( Double.toString(GPA) );
        
    }
    
    // Add course
    private void addCourseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCourseButtonActionPerformed
        // Gets the data from course number
        
        String Course = CourseNameText.getText();
        String Completed = CurrentSelection.getItemAt(CurrentSelection.getSelectedIndex()).toString();
        String Grade = GradeSelector.getItemAt(GradeSelector.getSelectedIndex()).toString();
        String Hours = hoursText.getText();
        
        if ( (Course.length() == 6) || (Course.length() == 7) ){
            // Adds it to the list and saves it in system
            saveCourse(Course, Completed, Grade, Hours);
            createGradeFile(Course);
            createCategoryFile(Course);
            fillTable();
            calculateGPA();
        } else {
            msgbox("Course name not filled correctly."); 
        }
    }//GEN-LAST:event_addCourseButtonActionPerformed
    
    // Remove Course
    private void removeCourseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeCourseButtonActionPerformed
        // Gets the data from course number
        String Course = CourseNameText.getText();
        
        if ( (Course.length() == 6) || (Course.length() == 7) ){
            // Adds it to the list and saves it in system
            deleteCourse(Course);
            deleteGradeFile(Course);
            deleteCategoryFile(Course);
            fillTable();
            calculateGPA();
        } else {
            msgbox("Course name not filled correctly."); 
        }
    }//GEN-LAST:event_removeCourseButtonActionPerformed

    private void CurrentSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CurrentSelectionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CurrentSelectionActionPerformed

    private void checkDegreeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkDegreeButtonActionPerformed
        String Concentration = ConcentrationCombo.getItemAt(ConcentrationCombo.getSelectedIndex()).toString();
        
        String coreRemaining = getCoreRemaining(Concentration);
        if ( coreRemaining.length() > 0 ){
            msgbox("Core courses remaining for " + Concentration + ": " + coreRemaining);
        } else {
            msgbox("Core courses completed for " + Concentration + ".");
        }
        
        String supportingRemaining = getSupportingRemaining(Concentration);
        if ( supportingRemaining.length() > 0 ){
            msgbox("Supporting courses remaining for " + Concentration + ": " + supportingRemaining);
        } else {
            msgbox("Supporting courses completed for " + Concentration + ".");
        }
        
        String concentrationRemaining = getConcentrationRemaining(Concentration);
        if ( concentrationRemaining.length() > 0 ){
            msgbox("Concentration courses remaining for " + Concentration + ": " + concentrationRemaining);
        } else {
            msgbox("Concentration courses completed for " + Concentration + ".");
        }
    }//GEN-LAST:event_checkDegreeButtonActionPerformed

    private void gradeCourseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gradeCourseButtonActionPerformed
        SelectedCourse = gradeCourseText.getText();
        if ( SelectedCourse.length() == 6 || SelectedCourse.length() == 7 ){
            if ( courses.contains(SelectedCourse) ){
                GradeMenu GM = new GradeMenu();
                GM.setVisible(true);         
            } else {
                msgbox(SelectedCourse + " is not in the course list.");
            }
        } else {
            msgbox("Course is not a length of 6 or 7. EX: BIO111 or BIO111L");
        }
    }//GEN-LAST:event_gradeCourseButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox ConcentrationCombo;
    private javax.swing.JTextField CourseNameText;
    private javax.swing.JTable CoursesTable;
    private javax.swing.JComboBox CurrentSelection;
    private javax.swing.JComboBox GradeSelector;
    private javax.swing.JButton addCourseButton;
    private javax.swing.JButton checkDegreeButton;
    private javax.swing.JLabel gpaLabel;
    private javax.swing.JButton gradeCourseButton;
    private javax.swing.JTextField gradeCourseText;
    private javax.swing.JTextField hoursText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton removeCourseButton;
    // End of variables declaration//GEN-END:variables
}
